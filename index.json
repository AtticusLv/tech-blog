[{"categories":["生活"],"content":"定风波——苏轼 莫听穿林打叶声 何妨吟啸且徐行 竹杖芒鞋轻胜马 谁怕，一蓑烟雨任平生 料峭春风吹酒醒 山头斜照却相迎 回首向来萧瑟处 归去，也无风雨也无晴 ","date":"2024-05-23","objectID":"/posts/2024/dingfengbo/:0:0","tags":["苏轼"],"title":"定风波","uri":"/posts/2024/dingfengbo/"},{"categories":["前端"],"content":"react-flow介绍 React Flow是一个基于React的流程图库，用于在Web应用程序中创建可交互的流程图和节点编辑器。它提供了一个可定制的组件集合，可以轻松地创建和管理节点、连接和布局。React Flow支持拖放、缩放、平移和连接节点等交互功能。 React Flow的主要特点包括： 可定制性：React Flow的组件是可定制的，可以根据需要添加样式、事件处理程序和自定义逻辑。用户可以完全控制节点和连接的外观和行为。 交互功能：React Flow提供了拖放、缩放、平移和连接节点等常见的交互功能。用户可以轻松地创建、修改和删除节点，以及连接它们。 布局算法：React Flow内置了多种布局算法，包括树状布局、网格布局和力导向布局等。用户可以根据需要选择合适的布局算法，以确保流程图的可视化效果。 扩展性：React Flow提供了丰富的API和事件钩子，以支持自定义行为和扩展。用户可以根据需要添加新的功能或修改现有功能。 可视化效果：React Flow使用CSS和SVG等技术来绘制流程图，可以创建出美观、高度可定制的可视化效果。 总之，React Flow是一个强大且灵活的库，适用于构建各种类型的流程图和节点编辑器。无论是构建工作流程、图表、组织结构图还是其他类型的图形应用，React Flow都可以提供丰富的功能和良好的用户体验。 文档 react-flow github ","date":"2023-10-16","objectID":"/tech/other/react-flow/:0:0","tags":["react-flow"],"title":"react-flow流程图库","uri":"/tech/other/react-flow/"},{"categories":["技术"],"content":" 原文：https://blog.bytebytego.com/p/ep68-top-architectural-styles?ref=dailydev CQRS Layered(n-tier) Mirokernel Microservices Space-Based DDD Event-Driven MVP Orchestration ","date":"2023-10-07","objectID":"/tech/architecture/software_architecture_styles/:0:0","tags":["架构"],"title":"几种常见的软件架构","uri":"/tech/architecture/software_architecture_styles/"},{"categories":["技术"],"content":" 原文：https://blog.bytebytego.com/p/sessions-tokens-jwt-sso-and-oauth?ref=dailydev ","date":"2023-10-07","objectID":"/tech/other/session_token_jwt_sso_oauth/:0:0","tags":["session","token","jwt","sso","oauth"],"title":"一张图说明Session、Token、JWT、SSO和OAuth","uri":"/tech/other/session_token_jwt_sso_oauth/"},{"categories":["技术"],"content":"本地开发时不注册Eureka 在启动指令中加入 --eureka.instance.metadata-map.version=LOCAL ","date":"2023-05-23","objectID":"/tech/other/eureka_not_register_local_test/:1:0","tags":["eureka"],"title":"本地测试不注册Eureka","uri":"/tech/other/eureka_not_register_local_test/"},{"categories":["技术"],"content":" 参考 https://zhuanlan.zhihu.com/p/444649783 ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:0:0","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"安装InfluxDB和Telegraf ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:1:0","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"1. 获取InfluxDB和telegraf image docker pull influxdb docker pull telegraf ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:1:1","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"2. 运行InfluxDB 在运行InfluxDB之前，先在本地创建一个目录，方便去备份InfluxDB的存储 docker run -d --name influxdb -p 8086:8086 --volume $PWD:/root/.influxdbv2 influxdb 通过$PWD命令绑定host宿主机目录 ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:1:2","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"3. 运行telegraf 直接运行telegraf会提示缺少config，可以先运行起来，后面创建了telegraf配置再配置telegraf.config文件 docker run -d --name=telegraf -P telegraf 报错信息如下 2023-05-17T05:59:52Z I! Loading config: /etc/telegraf/telegraf.conf 2023-05-17T05:59:52Z E! [telegraf] Error running agent: no outputs found, did you provide a valid config file? ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:1:3","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"4. 打开InfluxDB 访问 http://localhost:8086 第一次登录的时候会提示配置用户名、密码、组织等信息，并且会生成一个api token ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:1:4","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"5. 配置telegraf 可以在宿主机上创建telegraf目录，将telegraf.conf配置文件绑定到容器指定volume上，容器上目录地址 /etc/telegraf telegraf.conf配置可以从influxdb的telegraf页面中获取到，也可以自己增加，下面是个配置参考，需要将url和token换成实际influxdb的值 # Configuration for telegraf agent [agent] ## Default data collection interval for all inputs interval = \"1s\" ## Rounds collection interval to 'interval' ## ie, if interval=\"10s\" then always collect on :00, :10, :20, etc. round_interval = true ## Telegraf will send metrics to outputs in batches of at most ## metric_batch_size metrics. ## This controls the size of writes that Telegraf sends to output plugins. metric_batch_size = 1000 ## Maximum number of unwritten metrics per output. Increasing this value ## allows for longer periods of output downtime without dropping metrics at the ## cost of higher maximum memory usage. metric_buffer_limit = 10000 ## Collection jitter is used to jitter the collection by a random amount. ## Each plugin will sleep for a random time within jitter before collecting. ## This can be used to avoid many plugins querying things like sysfs at the ## same time, which can have a measurable effect on the system. collection_jitter = \"0s\" ## Default flushing interval for all outputs. Maximum flush_interval will be ## flush_interval + flush_jitter flush_interval = \"10s\" ## Jitter the flush interval by a random amount. This is primarily to avoid ## large write spikes for users running a large number of telegraf instances. ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s flush_jitter = \"0s\" ## By default or when set to \"0s\", precision will be set to the same ## timestamp order as the collection interval, with the maximum being 1s. ## ie, when interval = \"10s\", precision will be \"1s\" ## when interval = \"250ms\", precision will be \"1ms\" ## Precision will NOT be used for service inputs. It is up to each individual ## service input to set the timestamp at the appropriate precision. ## Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\". precision = \"\" ## Log at debug level. # debug = false ## Log only error level messages. # quiet = false ## Log target controls the destination for logs and can be one of \"file\", ## \"stderr\" or, on Windows, \"eventlog\". When set to \"file\", the output file ## is determined by the \"logfile\" setting. # logtarget = \"file\" ## Name of the file to be logged to when using the \"file\" logtarget. If set to ## the empty string then logs are written to stderr. # logfile = \"\" ## The logfile will be rotated after the time interval specified. When set ## to 0 no time based rotation is performed. Logs are rotated only when ## written to, if there is no log activity rotation may be delayed. # logfile_rotation_interval = \"0d\" ## The logfile will be rotated when it becomes larger than the specified ## size. When set to 0 no size based rotation is performed. # logfile_rotation_max_size = \"0MB\" ## Maximum number of rotated archives to keep, any older logs are deleted. ## If set to -1, no archives are removed. # logfile_rotation_max_archives = 5 ## Pick a timezone to use when logging or type 'local' for local time. ## Example: America/Chicago # log_with_timezone = \"\" ## Override default hostname, if empty use os.Hostname() hostname = \"\" ## If set to true, do no set the \"host\" tag in the telegraf agent. omit_hostname = false [[outputs.influxdb_v2]] ## The URLs of the InfluxDB cluster nodes. ## ## Multiple URLs can be specified for a single cluster, only ONE of the ## urls will be written to each interval. ## ex: urls = [\"https://us-west-2-1.aws.cloud2.influxdata.com\"] urls = [\"http://localhost:8086\"] ## Token for authentication. token = \"$INFLUX_TOKEN\" ## Organization is the name of the organization you wish to write to; must exist. organization = \"org\" ## Destination bucket to write into. bucket = \"test\" ## The value of this tag will be used to determine the bucket. If this ## tag is not set the 'bucket' option is used as the default. # bucket_tag = \"\" ## If true, the bucket tag will not be added to the m","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:1:5","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"安装Grafana打通InfluxDB InfluxDB提供了Dashboard，我们也可以通过Grafana面板连通InfluxDB数据源 ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:2:0","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"1. 拉取grafana镜像 docker pull grafana/grafana ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:2:1","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"2. 运行grafana容器，绑定host volume 可以先提前运行下grafana，然后将grafana配置copy出来 docker cp \u003ccontainer_id\u003e:/usr/share/grafana $PWD/grafana 这样可以对grafana基础配置做修改，因为后面会将grafana页面嵌入到自己的项目中，所以需要对default.ini配置进行修改 # set to true if you want to allow browsers to render Grafana in a \u003cframe\u003e, \u003ciframe\u003e, \u003cembed\u003e or \u003cobject\u003e. default is false. allow_embedding = true 允许匿名访问 #################################### Anonymous Auth ###################### [auth.anonymous] # enable anonymous access enabled = true 运行grafana容器 docker run -d --name grafana -p 3000:3000 --volume $PWD/grafana:/usr/share/grafana grafana/grafana 这样就看到了grafana登录页面了 http://localhost:3000 初始用户名和密码都是admin ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:2:2","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"3. 创建InfluxDB数据源 打开数据源地址 http://localhost:3000/connections/connect-data 选择influxdb数据源 选择Flux查询语言，地址选择InfluxDB的container地址，也可以通过内网dns固定一个地址 因为用的influxdb2.0，所以认证方式采用token方式 ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:2:3","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"4. 配置grafana仪表盘 ","date":"2023-05-17","objectID":"/tech/cloudnative/influxdb_installation/:2:4","tags":["InfluxDB","Telegraf","Docker","Grafana"],"title":"使用InfluxDB、Telegraf和Grafana采集和展示时序数据","uri":"/tech/cloudnative/influxdb_installation/"},{"categories":["技术"],"content":"目标 将一个已有的仓库里全部内容迁移到新的仓库里去 迁移后保留commit历史记录和所有分支 ","date":"2023-04-04","objectID":"/tech/other/git_migrate_existed_repository/:1:0","tags":["git"],"title":"git迁移已有仓库到新仓库","uri":"/tech/other/git_migrate_existed_repository/"},{"categories":["技术"],"content":"步骤 ","date":"2023-04-04","objectID":"/tech/other/git_migrate_existed_repository/:2:0","tags":["git"],"title":"git迁移已有仓库到新仓库","uri":"/tech/other/git_migrate_existed_repository/"},{"categories":["技术"],"content":"1. 创建新仓库 在git托管平台上手动创建代码仓库 ","date":"2023-04-04","objectID":"/tech/other/git_migrate_existed_repository/:2:1","tags":["git"],"title":"git迁移已有仓库到新仓库","uri":"/tech/other/git_migrate_existed_repository/"},{"categories":["技术"],"content":"2. 克隆旧仓库 git clone git@github.com:xxx/A.git --bare ","date":"2023-04-04","objectID":"/tech/other/git_migrate_existed_repository/:2:2","tags":["git"],"title":"git迁移已有仓库到新仓库","uri":"/tech/other/git_migrate_existed_repository/"},{"categories":["技术"],"content":"3. 推送新仓库 cd A.git # 推送所有分支 git push git@github.com:xxx/B.git --all # 推送所有tag git push git@github.com:xxx/B.git --tags ","date":"2023-04-04","objectID":"/tech/other/git_migrate_existed_repository/:2:3","tags":["git"],"title":"git迁移已有仓库到新仓库","uri":"/tech/other/git_migrate_existed_repository/"},{"categories":["技术"],"content":"问题 更新了idea intellij到最新版本后，无法拉到jar source源码，显示 这样就看不到jar的源码了，排查问题很痛苦 ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:1:0","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"原因 本地的maven版本和idea默认的版本（新版本是3.8.1）不一致，导致无法拉取到source jar包 一般是idea默认的maven版本太高了 ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:2:0","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"解决方法 ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:3:0","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"1. 将idea的maven版本配置成和本地一样的版本 查看本地的maven版本 mvn -version 将maven路径直接拷贝到idea maven的配置里 此时idea会直接显示出maven路径的版本，如果没有显示，说明配置地址不对 ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:3:1","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"2. 将本地的maven升级到和idea版本一致 这种要重新去下载对应版本的maven，本地PATH重新绑定 注意：对于一些老工程已经依赖了旧版本的maven，只能保持maven和工程里版本一致 ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:3:2","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"3. maven wrapper 使用maven wrapper，其实就是工程里将maven的包放置进来，直接使用工程里的maven版本 ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:3:3","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"参考 https://stackoverflow.com/questions/70214833/intellij-2021-3-maven-not-able-to-resolve-dependencies-after-update-to-intellij ","date":"2023-04-03","objectID":"/tech/other/maven_cannot_found_source/:4:0","tags":["maven","IdeaIntellij"],"title":"maven无法更新source","uri":"/tech/other/maven_cannot_found_source/"},{"categories":["技术"],"content":"maven工程中，对多个子module及相应的pom版本进行管理是很头疼的事，利用flatten-maven-plugin 插件将pom版本统一管理起来，在变更的时候只需要改 \u003crevision\u003e1.0.0-SNAPSHOT\u003c/revision\u003e 使用姿势 使用${revision}对maven工程中多个pom里的版本号进行关联 ","date":"2023-03-16","objectID":"/tech/other/maven_reversion/:0:0","tags":["maven"],"title":"maven pom文件多版本管理revision","uri":"/tech/other/maven_reversion/"},{"categories":["技术"],"content":"父pom \u003cproject\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cparent\u003e \u003cgroupId\u003eorg.apache\u003c/groupId\u003e \u003cartifactId\u003eapache\u003c/artifactId\u003e \u003cversion\u003e18\u003c/version\u003e \u003c/parent\u003e \u003cgroupId\u003eorg.apache.maven.ci\u003c/groupId\u003e \u003cartifactId\u003eci-parent\u003c/artifactId\u003e \u003cname\u003eFirst CI Friendly\u003c/name\u003e \u003cversion\u003e${revision}\u003c/version\u003e ... \u003cproperties\u003e \u003crevision\u003e1.0.0-SNAPSHOT\u003c/revision\u003e \u003c/properties\u003e \u003c/project\u003e 注意revision在properties中声明 在build中使用相关插件 \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.codehaus.mojo\u003c/groupId\u003e \u003cartifactId\u003eflatten-maven-plugin\u003c/artifactId\u003e \u003cversion\u003e1.1.0\u003c/version\u003e \u003cconfiguration\u003e \u003c!-- 是否更新pom文件，此处还有更高级的用法 --\u003e \u003cupdatePomFile\u003etrue\u003c/updatePomFile\u003e \u003cflattenMode\u003eresolveCiFriendliesOnly\u003c/flattenMode\u003e \u003c/configuration\u003e \u003cexecutions\u003e \u003cexecution\u003e \u003cid\u003eflatten\u003c/id\u003e \u003cphase\u003eprocess-resources\u003c/phase\u003e \u003cgoals\u003e \u003cgoal\u003eflatten\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003cexecution\u003e \u003cid\u003eflatten.clean\u003c/id\u003e \u003cphase\u003eclean\u003c/phase\u003e \u003cgoals\u003e \u003cgoal\u003eclean\u003c/goal\u003e \u003c/goals\u003e \u003c/execution\u003e \u003c/executions\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e ","date":"2023-03-16","objectID":"/tech/other/maven_reversion/:1:0","tags":["maven"],"title":"maven pom文件多版本管理revision","uri":"/tech/other/maven_reversion/"},{"categories":["技术"],"content":"子pom 在parent的声明version中直接使用${revision}即可 \u003cproject\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cparent\u003e \u003cgroupId\u003eorg.apache.maven.ci\u003c/groupId\u003e \u003cartifactId\u003eci-parent\u003c/artifactId\u003e \u003cversion\u003e${revision}\u003c/version\u003e \u003c/parent\u003e \u003cgroupId\u003eorg.apache.maven.ci\u003c/groupId\u003e \u003cartifactId\u003eci-child\u003c/artifactId\u003e ... \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.apache.maven.ci\u003c/groupId\u003e \u003cartifactId\u003echild2\u003c/artifactId\u003e \u003cversion\u003e${project.version}\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c/project\u003e 参考 https://www.cnblogs.com/ElEGenT/p/12938773.html ","date":"2023-03-16","objectID":"/tech/other/maven_reversion/:2:0","tags":["maven"],"title":"maven pom文件多版本管理revision","uri":"/tech/other/maven_reversion/"},{"categories":["技术"],"content":"最近chatGPT和openai的GPT-4大火，来试一下bing搜索引擎的ai功能 如何使用Bing AI聊天 首先要访问 https://bing.com/new，需要先登录微软账号，加入到waitlist就可以直接用了 界面看起来还是比价清爽的 专业技术问题询问 ","date":"2023-03-15","objectID":"/posts/2023/bing-ai/:0:0","tags":["BingAI"],"title":"Bing AI聊天试用","uri":"/posts/2023/bing-ai/"},{"categories":["技术"],"content":"第一个话题BaaS 最近在研究BaaS，所以问了问啥是BaaS，BaaS有哪些 回答内容主要是一些提供服务的厂商 对于小白来说，跟着它做一些起点的调研还是够的，不过作为深度的技术人员，它回答的内容远远不够 ","date":"2023-03-15","objectID":"/posts/2023/bing-ai/:1:0","tags":["BingAI"],"title":"Bing AI聊天试用","uri":"/posts/2023/bing-ai/"},{"categories":["技术"],"content":"第二个话题 FaaS 开始第2个话题 faas 作为基础的检索功能还是很快就提供了想要的内容，不过除了OpenFunction和OpenFaaS外，其他开源的项目并没有列举出来 所以，如果bing收了钱用来影响ai的回答结论，这个也细想想也挺可怕的 ","date":"2023-03-15","objectID":"/posts/2023/bing-ai/:2:0","tags":["BingAI"],"title":"Bing AI聊天试用","uri":"/posts/2023/bing-ai/"},{"categories":["技术"],"content":"Envoy资料 ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:0:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"官方资料 https://www.envoyproxy.io/ ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:1:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"Envoy架构 https://jimmysong.io/blog/envoy-archiecture-and-terminology/ ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:2:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"Envoy教程 使用Envoy反向代理教程 https://www.tetrate.io/blog/get-started-with-envoy-in-5-minutes/ https://academy.tetrate.io/courses/envoy-fundamentals-zh 中文 Envoy 基础教程：入门篇 ​ https://icloudnative.io/posts/run-envoy-on-your-laptop/ ​ https://www.envoyproxy.io/docs/envoy/latest/start/sandboxes/front_proxy.html 视频\u0026实验室教程 https://academy.tetrate.io/courses/envoy-fundamentals-zh 中文文档 https://icloudnative.io/envoy-handbook/docs/overview/overview/ ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:3:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"原理 ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:4:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"理解 Istio Service Mesh 中 Envoy 代理 Sidecar 注入及流量劫持 ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:4:1","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"Filter Listener Filter Network Filter Http Filter ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:4:2","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"配置 config dump curl localhost:15000/config_dump ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:5:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"相关文章 Using Envoy to route internal requests https://blog.asana.com/2021/08/route-internal-requests-services-envoy/#close Istio EnvoyFilter+Lua 简单实现动态路由转发 Envoy Http请求原理解析 ","date":"2023-03-08","objectID":"/tech/cloudnative/envoy/:6:0","tags":["envoy"],"title":"Envoy资料","uri":"/tech/cloudnative/envoy/"},{"categories":["技术"],"content":"官网 https://ebpf.io/ 中文教程 https://lib.jimmysong.io/what-is-ebpf/introduction/ ","date":"2023-03-08","objectID":"/tech/cloudnative/ebpf/:0:1","tags":["eBPF"],"title":"eBPF","uri":"/tech/cloudnative/ebpf/"},{"categories":["技术"],"content":"Merbridge 通过ebpf加速服务网格 https://github.com/merbridge/merbridge https://merbridge.io/docs/getting-started/ 阿里coolbpf https://github.com/aliyun/coolbpf ","date":"2023-03-08","objectID":"/tech/cloudnative/ebpf/:0:2","tags":["eBPF"],"title":"eBPF","uri":"/tech/cloudnative/ebpf/"},{"categories":["技术"],"content":"https://ilogtail.gitbook.io/ilogtail-docs/about/readme ","date":"2023-03-08","objectID":"/tech/cloudnative/itogtail/:0:0","tags":["iLogtail"],"title":"iLogtail","uri":"/tech/cloudnative/itogtail/"},{"categories":["生活"],"content":"三亚旅游攻略 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:0:0","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"行程 日期 时间段 地点 备注 03-03 中午 🛬三亚凤凰机场 抵达三亚 下午 取租车🚗 入驻亚龙湾酒店 酒店玩耍 晚上 海鲜市场吃海鲜🦈🦐🦀 保持警惕 谨防被宰！ 03-04 上午 🍜酒店早餐 中午 【出发】去南海观音，就近吃饭 下午 南海观音 晚上 椰梦长廊🌅 18点前赶到看日落 03-05 上午 🍜酒店早餐 中午 【出发】去海棠湾酒店，路上就近吃饭 下午 入住海棠湾 海棠湾酒店 沙滩玩耍🏖🏊 晚上 就近吃饭🥘 03-06 上午 🍜酒店早餐， 中午 蜈支洲岛🏝 下午 蜈支洲岛🏝 晚上 返回酒店 03-07 上午 🍜酒店早餐，收拾准备返程 中午 开车去机场，路上看看玩什么，也可以在酒店玩 下午 返还租车🚗 返程🛫 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:1:0","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"租车 租车平台对比 名称 是否押金 价格 靠谱度 一嗨租车 ⭐️⭐️⭐️⭐️⭐️ 神州租车 ⭐️⭐️⭐️⭐️⭐️ 携程 ⭐️ 一嗨租车在三亚凤凰机场的停车场里取就行，很方便，走的时候直接在机场还车就可以 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:2:0","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"住宿 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:3:0","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"亚龙湾 三亚亚龙湾星华套房假日酒店 地点：三亚市吉阳区亚龙湾国家旅游度假区龙塘路14号 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:3:1","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"海棠湾 三亚 Hotel海棠湾阳光壹酒店 地点：三亚市海棠区海棠南路4号 出门过个马路就是海边，可以赶海捡贝壳🐚 这里可以看日出 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:3:2","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"景点 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:0","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"椰梦长廊 看日落 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:1","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"南海观音 壮观的景象 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:2","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"亚龙湾热带天堂森林公园 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:3","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"蜈支洲岛 登岛时间为08:00至16:00；离岛时间为08:30至18:30 蜈支洲岛码头轮渡：上岛时间8:00-16:00；下岛时间08:30-18:30；人较多，早上排队上岛时间通常需要1小时左右 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:4","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"小东海 这里早上可以赶海，潮水褪去后 石头都露出来，可以在里面捡螃蟹和海星 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:5","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"后海村 很多冲浪在这里，但是自驾过来慎重，路很窄，很堵，要是想看日落要提前一些出发，基本7点不到就看不到日落了 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:6","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"海昌不夜城 很多小孩玩的东西，离海棠湾和免税店二期很近，有很大的摩天轮 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:4:7","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"吃饭 一天两顿饭感觉就够了，一顿酒店早餐，一顿当地特色 每天一个椰子🥥 喝起来还是很开心的 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:5:0","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"六盘村 一个小村改造的，很多东北人开店的地方，也有网红店，吃饭可以挑一挑再吃 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:5:1","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"亿恒夜市 千万不要去！！！太坑了 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:5:2","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"第一海鲜市场 没去过，被夜市坑了后就不想再去了 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:5:3","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["生活"],"content":"椰子鸡 吃了两顿椰子鸡，一顿是在酒店里赠送的，分量很大，另外一份是在大众点评上搜的排名靠前的 ","date":"2023-03-02","objectID":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/:5:4","tags":["旅游"],"title":"三亚旅游规划","uri":"/posts/2023/%E4%B8%89%E4%BA%9A%E6%97%85%E6%B8%B8%E8%A7%84%E5%88%92/"},{"categories":["技术"],"content":"熔断限流对比 Hystrix Sentinel Istio 熔断 ✅ ✅ ✅ 限流 ✅ ✅ ✅ 接入方式 SDK SDK/Agent 配置化 应用感知 感知 感知 无感透明 依赖编码 依赖 依赖（Java） 不依赖 istio熔断和限流主要依赖envoy提供的能力，具体内容可以查看 https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/circuit_breaking Istio方式 ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_ratelimit_circuit_breaker/:0:0","tags":["istio","限流熔断"],"title":"Istio熔断和限流工作原理","uri":"/tech/cloudnative/istio_ratelimit_circuit_breaker/"},{"categories":["技术"],"content":"istio 熔断 通过编写VirtualService和DestinationRule可以管理接口级别的熔断能力 ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_ratelimit_circuit_breaker/:1:0","tags":["istio","限流熔断"],"title":"Istio熔断和限流工作原理","uri":"/tech/cloudnative/istio_ratelimit_circuit_breaker/"},{"categories":["技术"],"content":"istio 限流 https://istio.io/latest/docs/tasks/policy-enforcement/rate-limit/ 参考 https://www.kubernetes.org.cn/5556.html https://istio.io/latest/docs/reference/config/networking/destination-rule/#TrafficPolicy ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_ratelimit_circuit_breaker/:2:0","tags":["istio","限流熔断"],"title":"Istio熔断和限流工作原理","uri":"/tech/cloudnative/istio_ratelimit_circuit_breaker/"},{"categories":["技术"],"content":" Envoy是service mesh中常用的数据面板（data plane），用来流量劫持和转发的。istio（一种控制面板的实现方式）中常是用envoy来作为sidecar，istio在envoy的xDS协议上做了很多扩展逻辑，流量劫持背后主要通过iptables技术将出入pod流量都劫持到sidecar上，这里主要参考Jimmy Song大佬的博客，深挖下enovy的基本原理和相关配置，收集整理了下相关资料 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:0:0","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"Envoy 转一张envoy的架构图(转自jimmysong.io) ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:0","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"一些术语 Downstream 下游服务，指连接到envoy的服务，这些服务发送请求到envoy，并接收envoy响应 Upstream 上游服务，指接收envoy连接和请求的服务，并将响应返回给envoy Listener 监听器，envoy暴露一个活多个listener来监听downstream的请求；当listener监听到请求时，会交给filter chains处理 Cluster envoyy连接的一组逻辑相同的upstream服务；envoy通过service discovery来发现cluster成员，通过load balance将流量路由到cluster的各个成员去 xDS xDS中的x是一个代词，x指一系列的，DS=Discovery Service发现服务，目前是envoy作为数据面板的api实现规范，可以在envoy api中看到具体实现，xDS REST and gRPC protocol文档 xDS包括： LDS: listener discovery service RDS: route discovery service SRDS: scoped route discovery service VHDS: virtual host discovery service CDS: cluster discovery service EDS: endpoint discovery service SDS: secret discovery service RTDS: runtime discovery service ADS: aggregated discovery service, 这是个特殊的，是对其他的一种聚合统一封装 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:1","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"关于xDS版本 ​ xDS在envoy和mesh架构中是一个很重要的概念，也是选址规则的核心逻辑。目前envoy的xDS协议有v1和v2版本，在isito1.0+版本中只支持v2版本的xDS API了，目前istio官网的bookinfo示例中也是指定了--v2-config-only ，需要注意的是v2版本并不直接向下兼容v1版本。envoy不同版本对v1和v2版本的支持。 ​ 关于xDS，CNCF已经开源出来了，也是主流的数据面板的api规范，感兴趣可以到cncf/xds查看下，最新官网已经出了v3的版本，仍在开发中。v2版本是当前的稳定版本。 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:2","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"istio和envoy关系 ​ envoy与业务服务部署在同一个pod中，共享网络和namespace，envoy通过iptables技术劫持业务服务的进出流量，按照istio下发的流量规则去路由流量。其中envoy的容器中部署了istio的探针——pilot-agent，在启动时istio会为envoy注入bootstrap配置，其余和动态的配置会通过pilot下发。 ​ 在整个数据平面中，各个envoy的动态配置应该是相同的，可以通过istioctl ps命令查看各个sidecar的配置是否同步 ​ 运行时，可以在sidecar容器内通过命令行查看envoy proxy配置是否同步 curl http://localhost:15000/config_dump ​ 也可以通过kubectl命令将文件dump下来 kubectl -n default exec ratings-v1-7c9949d479-dwkr4 -c istio-proxy curl http://localhost:15000/config_dump \u003e dump-rating.json ​ 这里用到了envoy的admin接口，详细的admin接口介绍可以在envoy文档中看到 istio+envoy启动过程 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:3","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"envoy proxy配置解析 ​ istio部署的istio-proxy(即envoy sidecar，部署时名字命名为istio-proxy)，包含以下几个部分： bootstrap: envoy启动时加载的静态配置 listeners: 监听器配置，通过LDS下发 clusters: 集群配置，静态配置中包括xds-grpc和zipkin地址，动态配置使用CDS下发 cluster分为inbound和outbound，inbound对应envoy所在pod上的服务，outbound占了大多数，对应envoy所在pod以外的服务 routes: 路由配置，静态配置中包括了本地监听的服务集群信息，引用了cluster，动态配置使用RDS下发 每个部分都包括静态配置和动态配置，其中bootstrap配置是在集群启动时通过istio-proxy的启动参数注入的，配置文件在 /etc/istio/proxy/envoy-rev0.json 以官方bookinfo工程示例，可以看到下面的配置 如果部署了kiali，也可以在workload的面板中看到envoy的各个配置信息 boostrap 服务发现类型 cluster 的服务发现类型主要有： ORIGINAL_DST：类型的 Cluster，Envoy 在转发请求时会直接采用 downstream 请求中的原始目的地 IP 地址 EDS：EDS 获取到该 Cluster 中所有可用的 Endpoint，并根据负载均衡算法（缺省为 Round Robin）将 Downstream 发来的请求发送到不同的 Endpoint。istio 会自动为集群中的 service 创建代理信息，listener 的信息从 service 获取，对应的 cluster 被标记为 EDS 类型 STATIC：缺省值，在集群中列出所有可代理的主机 Endpoints。当没有内容为空时，不进行转发。 LOGICAL_DNS：Envoy 使用 DNS 添加主机，但如果 DNS 不再返回时，也不会丢弃。 STRICT_DNS：Envoy 将监控 DNS，而每个匹配的 A 记录都将被认为是有效的。 两个特殊的cluster BlackHoleCluster 匹配到BlackHoleCluster的流量不会被转发 { \"name\": \"BlackHoleCluster\", \"type\": \"STATIC\", \"connectTimeout\": \"10s\" } PassthroughtCluster 匹配到PassthroughCluster的流量数据包的目的ip不会改变 { \"name\": \"PassthroughCluster\", \"type\": \"ORIGINAL_DST\", \"connectTimeout\": \"10s\", \"lbPolicy\": \"CLUSTER_PROVIDED\", \"circuitBreakers\": { \"thresholds\": [ { \"maxConnections\": 4294967295, \"maxPendingRequests\": 4294967295, \"maxRequests\": 4294967295, \"maxRetries\": 4294967295 } ] } 类型为ORIGINAL_DST 流量将原样转发 特殊listener envoy有一个特殊的listener——virtualOutbound virtualOutbound：每个envoy都有一个绑定到0.0.0.0:15001的listener，下面挂关联了许多virtual listener。 iptables会先将所有出站流量导入该listener，其中有个字段useOriginalDst设置为true，表示会使用最佳匹配原始目的地的方式，将请求分发到和请求原目的地址关联的virtual listener处理； 如果没有找到任何的virtual listener，则根据istio的outboundTrafficPolicy全局配置选项进行处理，这里会有2种情况 outboundTrafficPolicy: ALLOW_ANY: 网格允许法相任何外部服务的请求，不管改服务是否在pilot的服务注册表中，在这个策略下，pilot会在下发给envoy的VirtualOutbound Listener加入一个upstream cluster为PassthroughCluster的TCP proxy filter，找不到匹配端口的listener请求会被该TCP proxy filter处理，请求将会被发送到其IP头中的原始目的地址 outboundTrafficPolicy: REGISTRY_ONLY: 只允许法相Pilot服务注册表中存在的服务对外请求。这种策略下，Pilot将会再下发给Envoy的VirtualOutbound Listener加入一个upstream cluster位BlackHoleCluster的TCP proxy filter，找不到匹配端口listener的请求会被该TCP proxy filter处理，由于BlackHoleCluster中没有配置upstream host，请求实际上会被丢弃 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:4","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"一次请求在Envoy中经过了什么 在官网Life of a Request章节中有详细描述：envoy可以简化为Listener和Cluster两个部分构成 Listener：处理downstream请求，将响应体返回给downstream Cluster：处理到upstream连接和请求，将请求直接发送到endpoint，其中包括cluster注册表、负载均衡、健康检查、连接池等 envoy是事件驱动模型，一进程多线程的方式，主线程主要处理envoy自身的生命周期、配置、监控等，每个请求都有独立的worker线程来处理的。每个work线程维护着到upstream各个endpoint的TCP连接池 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:5","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"Bookinfo示例调用过程 ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:1:6","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":"参考资料 https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/arch_overview https://jimmysong.io/blog/envoy-proxy-config-deep-dive/ https://jimmysong.io/blog/envoy-sidecar-injection-in-istio-service-mesh-deep-dive/ https://cloud.tencent.com/developer/article/1552334 https://blog.csdn.net/qq_20365437/article/details/107702413 https://academy.tetrate.io/courses/envoy-fundamentals ","date":"2023-03-02","objectID":"/tech/cloudnative/deep_into_istio_envoy/:2:0","tags":["istio","envoy"],"title":"深挖Istio中Envoy原理和配置","uri":"/tech/cloudnative/deep_into_istio_envoy/"},{"categories":["技术"],"content":" 日志级别包括trace, debug, info, warning, error, critical, off ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_proxy_log_level/:0:0","tags":["istio"],"title":"调整Istio Proxy日志级别","uri":"/tech/cloudnative/istio_proxy_log_level/"},{"categories":["技术"],"content":"istioctl命令动态调整 istio默认使用的warning级别的日志，可以通过istioctl命令来指定sidecar修改日志级别 istioctl -n [namespace] proxy-config log [podname] --level debug 可以更细粒度的控制proxy的各个组件的日志级别 istioctl -n [namespace] proxy-config log [podname] --level grpc:trace,config:debug 当然，proxy-config也可以缩写，istioctl都可以识别到的 istioctl -n [namespace] pc log [podname] --level debug envoy有提供admin的api，直接进入到容器内容curl调用接口来调整也是可以的 kubectl exec -n [namespace] [podname] -c istio-proxy -- curl -XPOST -s -o /dev/null http://localhost:15000/logging?level=debug 这里istio-proxy是istio部署sidecar时固定的容器名字 可以通过一下命令查看帮助文档 istioctl pc log --help ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_proxy_log_level/:1:0","tags":["istio"],"title":"调整Istio Proxy日志级别","uri":"/tech/cloudnative/istio_proxy_log_level/"},{"categories":["技术"],"content":"annotation方式调整 可以在k8s yaml配置文件中通过annotation的方式配置日志级别 template: metadata: annotations: \"sidecar.istio.io/logLevel\": debug # 可选: trace, debug, info, warning, error, critical, off ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_proxy_log_level/:2:0","tags":["istio"],"title":"调整Istio Proxy日志级别","uri":"/tech/cloudnative/istio_proxy_log_level/"},{"categories":["技术"],"content":"全局配置 istio配置都是在configmap中的，可以通过修改configmap来修改全局的proxy日志级别： kubectl -n istio-system edit configmap istio-sidecar-injector 修改values里面的global.proxy.logLevel字段即可 也可以使用istioctl来配置全局proxy日志级别 istioctl install --set profile=demo --set values.global.proxy.logLevel=debug ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_proxy_log_level/:3:0","tags":["istio"],"title":"调整Istio Proxy日志级别","uri":"/tech/cloudnative/istio_proxy_log_level/"},{"categories":["技术"],"content":"配置envoy componentLogLevel 我们可以在pod中指定annotation来设置envoy内部各个组件的日志级别 template: metadata: annotations: \"sidecar.istio.io/componentLogLevel\": \"ext_authz:trace,filter:debug\" 可以参考：https://www.envoyproxy.io/docs/envoy/latest/operations/cli#cmdoption-component-log-level 最终该配置会作为envoy--component-log-level启动参数 ","date":"2023-03-02","objectID":"/tech/cloudnative/istio_proxy_log_level/:4:0","tags":["istio"],"title":"调整Istio Proxy日志级别","uri":"/tech/cloudnative/istio_proxy_log_level/"},{"categories":["技术"],"content":"EnvoyFilter内部结构 ","date":"2023-03-02","objectID":"/tech/cloudnative/istio-envoyfilter/:0:0","tags":["istio"],"title":"Istio Envoyfilter","uri":"/tech/cloudnative/istio-envoyfilter/"},{"categories":null,"content":" 工欲善其事必先利其器 ","date":"2023-03-02","objectID":"/tech/other/coding_ide/:0:0","tags":["ide"],"title":"编程开发工具","uri":"/tech/other/coding_ide/"},{"categories":null,"content":"IDE 👍 Intellij IDEA Java、GO、Python等编程工具 👍 Visual Studio 前端开发编程IDE，可以配合各种插件使用 ","date":"2023-03-02","objectID":"/tech/other/coding_ide/:1:0","tags":["ide"],"title":"编程开发工具","uri":"/tech/other/coding_ide/"},{"categories":null,"content":"Database 👍 Sequel Ace 前身Sequel Pro已经不再维护了，最新孵化的Sequel Ace Navigate 商业化软件，地址google之 👍 Medis redis管理可视化工具 开源版代码 https://github.com/luin/medis DBeaver 数据库可视化管理工具，包括主流的mysql、postgresql、mariadb、mongodb等 ","date":"2023-03-02","objectID":"/tech/other/coding_ide/:2:0","tags":["ide"],"title":"编程开发工具","uri":"/tech/other/coding_ide/"},{"categories":null,"content":"Test \u0026 Debug Charles Wireshark 分析抓包信息工具 👍 Postman API测试工具 ","date":"2023-03-02","objectID":"/tech/other/coding_ide/:3:0","tags":["ide"],"title":"编程开发工具","uri":"/tech/other/coding_ide/"},{"categories":null,"content":"Web Brower 👍 Chrome Firefox Min ","date":"2023-03-02","objectID":"/tech/other/coding_ide/:4:0","tags":["ide"],"title":"编程开发工具","uri":"/tech/other/coding_ide/"},{"categories":null,"content":"Text Editor 👍 Typora Notion ​ 存储在云端，提供手机端、电脑端软件 语雀 钉钉 石墨 ","date":"2023-03-02","objectID":"/tech/other/coding_ide/:5:0","tags":["ide"],"title":"编程开发工具","uri":"/tech/other/coding_ide/"},{"categories":["技术"],"content":"技术新闻博客类 名称 链接 描述 DB-Engines https://db-engines.com/ 数据库相关、数据库排名 APM Digest https://www.apmdigest.com/ APM监控相关资料和新闻、趋势 DevOps Digest https://www.devopsdigest.com/ devops相关资料和新闻、趋势 CNCF https://www.cncf.io/ 云原生基金会 InfoQ https://www.infoq.cn/ https://infoq.com/ InfoQ Hacker News https://news.ycombinator.com/ Linux www.linux.com topics and blog related with Linux System Thoughtworks https://www.thoughtworks.com/insights/technology Thoughtworks insight web.dev https://web.dev/ 谷歌web开发网站 教程系列 名称 链接 描述 Baeldung https://www.baeldung.com/spring-tutorial 一系列初级教程，比如spring、java、mesh等 Javapoint系列教程 https://www.javatpoint.com/operating-system 除了java，还有操作系统的初级教程 技术大佬博客 名称 链接 描述 Bilgin Ibryam http://www.ofbizian.com/ 云原生布道，架构 Martin Fowler https://martinfowler.com/ ThoughtWorks 微服务 敖小剑 https://skyao.io/ 国内 云原生布道 赵化冰 https://www.zhaohuabing.com/ 国内 云原生布道 Brendan Gregg https://www.brendangregg.com/ 内核性能 Thorsten Ball https://thorstenball.com/ Kamil Grzybek https://www.kamilgrzybek.com/ Modular Monolith System Architecture ROC https://imroc.cc/ 云原生 Mark Zhu https://blog.mygraphql.com/zh/ 云原生 Jimmy Song https://jimmysong.io/ 云原生 阮一峰 http://www.ruanyifeng.com/blog/ 每周五精选内容 科技公司博客 名称 链接 描述 美团 https://tech.meituan.com Shopify https://shopify.engineering Netflix https://netflixtechblog.com Facebook/Meta https://tech.facebook.com ","date":"2023-03-02","objectID":"/posts/2023/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/:0:0","tags":["博客"],"title":"技术新闻博客收集","uri":"/posts/2023/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2%E6%94%B6%E9%9B%86/"},{"categories":["Linux"],"content":"USE方法定位性能问题 https://www.brendangregg.com/usemethod.html 实践 https://blog.mygraphql.com/zh/posts/low-tec/network/tcp-flow-control-part1/ ","date":"2023-03-01","objectID":"/tech/architecture/use_method/:1:0","tags":["USE"],"title":"USE方法定位Linux性能问题","uri":"/tech/architecture/use_method/"},{"categories":["技术"],"content":"kubectl指令 帮助 kubectl --help 查看apiVersion kubectl api-versions 创建pod kubectl create -f [file.yaml] -n [namespace] 应用配置 kubectl apply -f [file.yaml] -n [namespace] 删除资源 kubectl delete -f [file.yaml] -n [namespace] 查看pods kubectl get pods 查看service kubectl get services 查看deployment kubectl get deployments 查看namespace kubectl get namespacs 查看详细信息 (后面加-o wide) kubectl get pods -o wide kubectl get services -o wide kubecetl get deployments -o wide 进入到指定pod kubectl exec -it [pod name] -n [namespace] -- bash # desprecated kubectl exec -it [pod name] bash 查看指定容器log kubectl logs -f service-a-v1-97966586b-cg6rh -n [namespace] -c istio-init 查看k8s当前集群配置信息 kubectl config view 查看pod里容器数 kubectl get pods [pod名称] -o jsonpath={.spec.initContainers[*].name} -n [namespace] 创建namespace kubectl create namespace [namespace] 切换namespace kubectl config set-context --current --namespace=[namespace-name] 查看当前配置or当前namespace kubectl config view --minify ","date":"2023-03-01","objectID":"/tech/cloudnative/kubernetes/kubectl/:1:0","tags":["kubernetes","k8s"],"title":"kubectl command","uri":"/tech/cloudnative/kubernetes/kubectl/"},{"categories":["Hugo"],"content":" Tips： 本站点针对技术文档做过调整，写作方式只针对本博客 Hugo初始化搭建 官网：https://gohugo.io/ ","date":"2023-02-28","objectID":"/posts/hugo/:0:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Hugo"],"content":"安装Hugo 安装方式有如下两种： 使用brew工具安装（国内镜像源一般都不是最新版本，有些新的主题无法使用） brew install hugo 直接下载release文件绑定到PATH上 最新的release包可以在Hugo releases拿到 ","date":"2023-02-28","objectID":"/posts/hugo/:1:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Hugo"],"content":"安装Theme git submodule add https://github.com/AtticusLv/FixIt themes/FixIt ","date":"2023-02-28","objectID":"/posts/hugo/:2:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Hugo"],"content":"本地调试 hugo server 编译静态文件，生成目录为/public hugo 创建日常博客 只文字版 hugo new posts/xxx.md 图文版 hugo new posts/xxx/index.md 使用typora编辑时，会自动在posts/xxx/目录下增加相关图片目录 创建技术文档 只文字版 hugo new tech/[catalog]/xxx.md 图文版 hugo new tech/[catalog]/xxx/index.md 例如，要创建一个技术文档，并且包换图片，catalog为「云原生」，那运行的命令为 hugo new tech/cloudnative/istio_proxy/index.md 在index.md文件中修改title、catalog，然后直接deploy到github上就完成发布了 ","date":"2023-02-28","objectID":"/posts/hugo/:3:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Hugo"],"content":"增加catalog分类 在layouts/tech/tech.html模板中，增加了下面的代码，可以根据文章中 catalog 字段来分类，这样让技术文章就具备层级结构了 tech.html中内容 ..... \u003c!-- 显示所有tech下的文档 --\u003e {{- $curpages := where .Site.Pages \"Type\" \"tech\" -}} \u003c!-- 根据catalog字段内容分类 --\u003e {{- $pages := $curpages.GroupByParam \"catalog\" -}} ..... 在tech目录下new出来的文章，会根据tech的模板，自动加上catalog字段 ","date":"2023-02-28","objectID":"/posts/hugo/:4:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Hugo"],"content":"如何在1级标题栏【技术文档】增加2级目录 以【cloudnative】举例 在tech下创建目录/tech/cloudnative /tech/cloudnative下创建 _index.md 文件，可以手动创建，也可以用命令行创建，内容如下： --- title: \"云原生目录\" layout: cloudnative hidden: true type: cloudnative summary: 历史文章按照年月归档. url: /tech/cloudnative menu: main: title: 架构文档 parent: tech weight: 0 params: icon: fa-brands fa-readme catalog: 云原生 --- 需要注意catalog、layout和type字段，其中menu是用来在1级标题栏下增加2级标题栏的主要代码，weight控制2级目录显示顺序，越大越靠上，越小越靠下 在layouts下创建目录/tech/cloudnative，创建文件cloudnative.html，内容可以从posts模板或者其他地方模板下复制过来，内容略 更新Theme样式 站点样式采用 FixIt，因为有部分样式要调整，已fork到 https://github.com/AtticusLv/FixIt git submodule update --remote --merge 使用bash一键提交 编辑bash脚本./deploy.sh一键提交git ./deploy.sh \"[commit content]\" 脚本内容如下： #!/bin/bash # date time currentDateTime=`date '+%Y-%m-%d %H:%M:%S'` commitMsg=$currentDateTime\" \"$1 echo \"提交commit: \"${commitMsg} git add . git commit -m \"${commitMsg}\" git pull git status echo \"git add/commit/pull done...\" # push to remote main branch git push -u origin main 注意：使用前需要给脚本添加权限 chmod 755 deploy.sh 特别注意 ","date":"2023-02-28","objectID":"/posts/hugo/:5:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Hugo"],"content":"无图片文章转换为有图片文章 因为hugo结构的原因，如果要将没有图片的文章转换为有图片的文章，需要单独创建一个目录，将原理的.md文件移入，并且重命名为index.md 剩余未完成工作 代码块行数和复制功能 ","date":"2023-02-28","objectID":"/posts/hugo/:6:0","tags":["Hugo"],"title":"Hugo写作指南","uri":"/posts/hugo/"},{"categories":["Linux"],"content":"apt-get install是应用程序管理器，用于一键安装软件包，与源码安装不同的是，该指令会自动检测并安装依赖，而且用apt-get安装的包都是成熟的软件包，基本不存在安装包有严重bug或者文件缺失的情况。 1、首先执行如下命令，更新相关资源 apt-get update 将所有包的来源更新，也就是提取最新的包信息，这一命令使用率非常高。 2、安装telnet apt-get install telnet 3、安装curl apt-get install curl 4、安装ifconfig apt-get install net-tools 5、安装vim apt-get install vim 6、安装ping apt-get install inetutils-ping ","date":"2023-02-27","objectID":"/tech/linux/apt-get/:0:0","tags":["apt-get"],"title":"使用apt-get安装工具","uri":"/tech/linux/apt-get/"},{"categories":["技术"],"content":"System Architecture Collection ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:0:0","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"Theories ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:1:0","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"TOGAF https://pubs.opengroup.org/architecture/togaf9-doc/arch/ ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:1:1","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"如何构建大型分布式系统 https://icyfenix.cn/ ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:1:2","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"Modular Monolith System https://www.kamilgrzybek.com/ ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:1:3","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"Multi-Runtime Microservices Architecture mecha架构 https://www.infoq.com/articles/multi-runtime-microservice-architecture/ ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:1:4","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"架构模板 arc42 https://arc42.org/overview ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:2:0","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"Common System Solutions ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:3:0","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"Reference Open Group Library https://publications.opengroup.org/ provide standards, guides, webinars, white papers about IT architecture and system design. 《架构师图谱》https://blog.xstudio.mobi/a/230.html ","date":"2023-02-26","objectID":"/tech/architecture/system_architecture/:4:0","tags":["架构"],"title":"System Architecture Collection","uri":"/tech/architecture/system_architecture/"},{"categories":["技术"],"content":"在构建docker镜像时遇到 =\u003e ERROR [internal] load metadata for docker.io/library/openjdk:8u252-jdk-slim 直接在mac上拉取镜像发现拉不到，换了一个平台架构发现镜像是存在的 docker pull openjdk:8u252-jdk-slim --platform linux/x86_64 # 拉取镜像的过程 8u252-jdk-slim: Pulling from library/openjdk 8559a31e96f4: Already exists 65306eca6b8e: Already exists b8f37a6e9e9b: Already exists 33231475bae0: Already exists Digest: sha256:3826479f6ca03bbd11e1e12eb78b856f90bf7cea0f534f7204854c82fd89eda2 Status: Downloaded newer image for openjdk:8u252-jdk-slim docker.io/library/openjdk:8u252-jdk-slim 最新的 Docker Desktop for Mac M1 版本，已经为我们集成了一个实验性的工具buildx，通过它，可以编译成各种不同平台架构下的镜像，buildx目前支持的平台架构可以通过命令 docker buildx ls 来查看 可以使用下面的命令构建出符合当前机器架构的镜像版本 docker buildx build --platform=linux/amd64 . [container name] 加tag的方式 docker buildx build --platform=linux/amd64 -t keruyun-registry.cn-hangzhou.cr.aliyuncs.com/keruyun/keruyun-sidecar-agent:r154 . ","date":"2023-01-02","objectID":"/tech/other/mac_m1_build_docker_image/:0:0","tags":["docker"],"title":"Mac M1上构建docker镜像","uri":"/tech/other/mac_m1_build_docker_image/"},{"categories":["技术"],"content":"vue admin projects collection ","date":"2022-08-02","objectID":"/tech/other/vue_admin_projects_collection/:0:0","tags":["vue"],"title":"vue admin projects collection","uri":"/tech/other/vue_admin_projects_collection/"},{"categories":["技术"],"content":"vite-element-admin https://github.com/mvpyb/vite-element-admin ","date":"2022-08-02","objectID":"/tech/other/vue_admin_projects_collection/:1:0","tags":["vue"],"title":"vue admin projects collection","uri":"/tech/other/vue_admin_projects_collection/"},{"categories":["技术"],"content":"vue-vben-admin 代码仓库： https://github.com/vbenjs/vue-vben-admin 说明文档： https://vvbin.cn/doc-next/guide/introduction.html 文档的代码仓库：https://github.com/vbenjs/vue-vben-admin-doc ","date":"2022-08-02","objectID":"/tech/other/vue_admin_projects_collection/:2:0","tags":["vue"],"title":"vue admin projects collection","uri":"/tech/other/vue_admin_projects_collection/"},{"categories":["技术"],"content":"ruoyi-vue-pro 文档: https://doc.iocoder.cn/ 代码仓库：https://github.com/YunaiV/ruoyi-vue-pro spring-cloud版本：https://github.com/YunaiV/yudao-cloud ","date":"2022-08-02","objectID":"/tech/other/vue_admin_projects_collection/:3:0","tags":["vue"],"title":"vue admin projects collection","uri":"/tech/other/vue_admin_projects_collection/"},{"categories":["技术","java"],"content":" Framework Project Reactor reactor-netty ORM(databse related) r2dbc r2dbc-mysql r2dbc-postgresql Web Spring Webflux Message reactor-kafka Tutorials Spring Data Reactive Repositories with MongoDB ","date":"2022-06-19","objectID":"/tech/other/java_reactive_programming/:0:0","tags":["java","reactive"],"title":"Java Reactive Programming","uri":"/tech/other/java_reactive_programming/"},{"categories":["技术","database"],"content":"通过Sequel连接mysql时发现无法连接，报错为： MySQL said: Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/lib/pl..... 原因是mysql8默认为caching_sha2_password加密方式，而sequel只支持mysql_native_password 修复方式 可以直接使用sql server来连接，在安装时选择支持全部的加密方式 本文因项目需要，手动改mysql的加密方式 加入mysql mysql -uroot -p 查看当前信息 use mysql; select Host, User, plugin from user; 可以看到 +-----------+------------------+-----------------------+ | Host | User | plugin | +-----------+------------------+-----------------------+ | % | root | caching_sha2_password | | localhost | mysql.infoschema | caching_sha2_password | | localhost | mysql.session | caching_sha2_password | | localhost | mysql.sys | caching_sha2_password | | localhost | root | mysql_native_password | +-----------+------------------+-----------------------+ 只修改root@localhost是不够的，root@%也需要修改 3. 修改加密方式 alter user 'root'@'localhost' identified with mysql_native_password by '12345678'; alter user 'root'@'%' identified with mysql_native_password by '12345678'; 刷新 flush privileges; ","date":"2021-07-17","objectID":"/tech/other/mysql_caching_sha2_password/:0:0","tags":["mysql"],"title":"mysql修改root密码，修复caching_sha2_password无法连接问题","uri":"/tech/other/mysql_caching_sha2_password/"}]